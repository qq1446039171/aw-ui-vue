(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{288:function(t,s,a){"use strict";a.r(s);var e=a(0),i=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{width:"300",src:"/logo.png"}})]),t._v(" "),s("font",{attrs:{color:"#5e6d82",size:"3"}},[t._v("\n在企业开发中，常常会为了一些业务需求，会重复开发一些通用的组件。会导致这些组件越积攒越多，后期使用会有很多复杂的问题。比如一些组件的重复性太高，风格不统一的问题。因此开发一个企业级ui框架变得尤为重要。目前这个ui框架吸收了一些成熟的ui框架，例如ElementUi，AntDesignVue，去开发一个常用的风格统一的ui框架。\n")]),t._v(" "),s("h3",{attrs:{id:"项目特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目特点"}},[t._v("#")]),t._v(" 项目特点")]),t._v(" "),s("ul",[s("li",[t._v("🎨 使用Vue作为框架，参考现代ui组件的设计风格，保证组件库的优雅和一致性。")]),t._v(" "),s("li",[t._v("🌍 框架内大量使用了基于Vue的包括数据响应式，事件订阅和双向绑定以及动态class等技术。")]),t._v(" "),s("li",[t._v("实现了一些基础的常用组件，在基础上又进行了功能增强，已应对开发的需求和组件封装的深度。")])]),t._v(" "),s("h3",{attrs:{id:"tip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tip"}},[t._v("#")]),t._v(" Tip")]),t._v(" "),s("p",[t._v("🔗 目前组件仍在持续更新中。本组件库仅供学习交流，请勿在生产环境中使用。 欢迎讨论交流，")])],1)}),[],!1,null,null,null);s.default=i.exports}}]);